import axios from 'axios'
import { Rekognition } from 'aws-sdk';
import type { NextPage } from 'next'
import Head from 'next/head'
import { useMemo, useState } from 'react'
import Button from '../components/Button/Button'

import { Dropzone } from '../components/Dropzone/Dropzone'
import styles from '../styles/Home.module.css'


const Home: NextPage = () => {
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [isComparing, setIsComparing] = useState(false);
  const [comparisonResult, setComparisonResult] = useState<Rekognition.CompareFacesResponse | null>(null);
  const [sourceImg, setSourceImg] = useState<File>();
  const [targetImg, setTargetImg] = useState<File>();

  async function handleSubmit() {
    setComparisonResult(null);

    const data = new FormData();

    if (!sourceImg || !targetImg) return;

    setIsComparing(true);

    data.append('sourceImg', sourceImg);
    data.append('targetImg', targetImg);

    try {
      const response = await axios.post<Rekognition.CompareFacesResponse>('/api/faceComparison', data);

      setComparisonResult(response.data);

    } catch (error) {
      alert('Ocorreu um erro ao tentar processar as imagens. Por favor, tente novamente com outra imagem. Se o problema persistir contate o suporte.')
      console.error(error);
    } finally {
      setIsComparing(false);
    }
  }

  const resultText = useMemo(() => {
    const unmatchedFaces = comparisonResult?.UnmatchedFaces?.length;
    const similarity = comparisonResult?.FaceMatches?.[0]?.Similarity || 0;
    const parsedSimilarity = parseFloat(similarity.toFixed(2));

    if (unmatchedFaces) {
      return `Não foi possível reconhecer ${unmatchedFaces} faces nas imagens. Por favor, tente outra imagem.`
    }


    if (parsedSimilarity > 70) {
      return `Os dois rostos parecem ser a mesma pessoa. A similaridade é de ${parsedSimilarity}%`;
    }

    if (parsedSimilarity > 50) {
      return `Os dois rostos contém semelhanças entre si e podem ser a mesma pessoa. A similaridade é de ${parsedSimilarity}%`;
    }

    return `Os dois rostos contém pouca semelhança. A similaridade é de ${parsedSimilarity}%`;

  }, [comparisonResult]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Comparação de face</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header className={styles.header}>
        <h1>
          Reconhecimento facial
        </h1>
        <p>Compare duas imagens e verifique se é a mesma pessoa.</p>
      </header>

      <main className={styles.main}>
        <div className={styles.grid}>
          <div className={styles.cardsContainer}>
            <Dropzone title="Imagem base" onSelectFile={setSourceImg} />
          </div>
          <div className={styles.cardsContainer}>
            <Dropzone title="Imagem para comparação" onSelectFile={setTargetImg} />
          </div>
        </div>
        <Button onClick={handleSubmit}>
          {isComparing ? 'Comparando...' : 'Comparar imagens'}
        </Button>
      </main>
      {comparisonResult && (
        <div className={styles.result}>
          <h2>Resultados</h2>
          <p>{resultText}</p>
        </div>
      )}
    </div>
  )
}

export default Home
